#Singleton Pattern Principles :-
Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the Java Virtual Machine.
The singleton class must provide a global access point to get the instance of the class.
Singleton pattern is used for logging, drivers objects, caching, and thread pool.
Singleton design pattern is used in core Java classes also (for example, java.lang.Runtime, java.awt.Desktop).

#Singleton Pattern Implementation
To implement a singleton pattern, we have different approaches, but all of them have the following common concepts.
Private constructor to restrict instantiation of the class from other classes.
Private static variable of the same class that is the only instance of the class.
Public static method that returns the instance of the class, this is the global access point for the outer world to get the instance of the singleton class.

#Eager initialization
In eager initialization, the instance of the singleton class is created at the time of class loading.
The drawback to eager initialization is that the method is created even though the client application might not be using it.

#Static block initialization
Static block initialization implementation is similar to eager initialization, except that instance of the class is created in the static block that provides the option for exception handling.

note:- Both eager initialization and static block initialization create the instance even before it’s being used and that is not the best practice to use.

#Lazy Initialization and thread safe singleton
Lazy initialization restricts the creation of the instance until it is requested for first time.
If the instance is already created, it will simply return the reference of the instance.
this method also has its own drawbacks.
Suppose there are two threads T1 and T2.
Both come to create the instance and check if “instance==null”.
Now both threads have identified instance variable as null thus they both assume they must create an instance.
They sequentially go into a synchronized block and create the instances.
In the end, we have two instances in our application.

This error can be solved using double-checked locking.
This principle tells us to recheck the instance variable again in a synchronized block

#Bill Pugh Singleton Implementation
“Initialization-on-demand holder idiom” also uses the static block idea, but in a different way. It suggests using a static inner class.
Notice: the private inner static class that contains the instance of the singleton class.
When the singleton class is loaded, SingletonHelper class is not loaded into memory and only when someone calls the getInstance() method, this class gets loaded and creates the singleton class instance.
This is the most widely used approach for the singleton class as it doesn’t require synchronization.

#Enum Singleton
Java ensures that any enum value is instantiated only once in a Java program.
Since Java Enum values are globally accessible, so is the singleton.

#Question: How does the Singleton pattern handle serialization?
 Answer: To ensure a Singleton instance remains unique during serialization, you need to implement the readResolve method.
 This method replaces the deserialized object with the existing instance.

references:
https://howtodoinjava.com/design-patterns/creational/singleton-design-pattern-in-java/
https://www.digitalocean.com/community/tutorials/java-singleton-design-pattern-best-practices-examples#1-eager-initialization